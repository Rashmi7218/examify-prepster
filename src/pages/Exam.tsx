import React, { useState, useEffect } from "react";
import { useNavigate } from "react-router-dom";
import { useAuth } from "@/context/AuthContext";
import ExamProgress from "@/components/ExamProgress";
import QuestionCard, { QuestionType } from "@/components/QuestionCard";
import MultipleSelectQuestion from "@/components/MultipleSelectQuestion";
import { Button } from "@/components/ui/button";
import { toast } from "sonner";

// Mock AWS exam data for AI Practitioner
const mockExamQuestions: QuestionType[] = [
  {
    id: "q1",
    text: "What is a valid data format for instruction-based fine-tuning?",
    options: [
      { id: "a", text: "Images that are labeled with categories" },
      { id: "b", text: "Playlists that are curated with recommended music" },
      { id: "c", text: "Prompt-response text pairs" },
      { id: "d", text: "Audio files with transcriptions" },
    ],
    correctOptionId: "c",
    explanation: "Prompt-response text pairs are a valid data format for instruction-based fine-tuning. This format includes examples of prompts and their corresponding desired responses, allowing the model to learn the pattern between instructions and expected outputs.",
    type: "single",
    learnMoreLink: { text: "Amazon Bedrock fine-tuning", url: "https://docs.aws.amazon.com/bedrock/latest/userguide/fine-tuning.html" }
  },
  {
    id: "q2",
    text: "A travel company wants to use a pre-trained generative AI model to generate background images for marketing materials. The company does not have ML expertise. Additionally, the company does not want to customize and host the ML model.",
    options: [
      { id: "a", text: "Amazon Bedrock" },
      { id: "b", text: "Amazon SageMaker JumpStart" },
    ],
    correctOptionId: "a",
    explanation: "Correct. Amazon Bedrock is a fully managed service that provides a unified API to access popular foundation models (FMs). Amazon Bedrock supports image generation models from providers such as Stability AI or AWS. You can use Amazon Bedrock to consume FMs through a unified API without the need to train, host, or manage ML models. This is the most suitable solution for a company that does not want to train or manage ML models for image generation.",
    type: "single",
    learnMoreLink: { text: "Amazon Bedrock", url: "https://aws.amazon.com/bedrock/" }
  },
  {
    id: "q3",
    text: "Select the correct AWS service or feature from the following list for each task. Each AWS service or feature should be selected one or more times. (Select FIVE.)",
    options: [
      { id: "guardrails", text: "Guardrails for Amazon Bedrock" },
      { id: "iam", text: "AWS Identity and Access Management (IAM)" },
    ],
    tasks: [
      { id: "task1", text: "Implement identity verification and resource-level access control.", correctId: "iam" },
      { id: "task2", text: "Set policies to avoid specific topics in a generative AI application.", correctId: "guardrails" },
      { id: "task3", text: "Filter harmful content based on defined thresholds for categories.", correctId: "guardrails" },
      { id: "task4", text: "Define user roles and permissions to access Amazon Bedrock.", correctId: "iam" },
      { id: "task5", text: "Monitor and analyze user inputs to ensure compliance with safety policies.", correctId: "guardrails" },
    ],
    correctOptionIds: ["iam", "guardrails", "guardrails", "iam", "guardrails"],
    explanation: "You can use Amazon Bedrock guardrails to control the content that is generated by Amazon Bedrock. You can use Amazon Bedrock to ensure that the content aligns with safety and compliance policies. You can use Amazon Bedrock guardrails to avoid specific topics, filter harmful content, and monitor user inputs for violations. You can use Amazon Bedrock guardrails to maintain a safe and compliant environment for generative AI applications. Amazon Bedrock guardrails help implement safeguards that are customizable to your use cases and responsible AI policies.\n\nIAM is a service that you can use for access control and identity management in AWS environments, including Amazon Bedrock. You can use IAM to define user roles and to set permissions to access resources. IAM provides a secure method to manage who can use specific features.",
    type: "multiple",
    learnMoreLink: { text: "Amazon Bedrock guardrails", url: "https://docs.aws.amazon.com/bedrock/latest/userguide/guardrails.html" }
  },
  {
    id: "q4",
    text: "A company wants to assess the performance of a foundation model (FM) for text generation. Which technique or metric will meet these requirements?",
    options: [
      { id: "a", text: "BLEU score" },
      { id: "b", text: "F1 score" },
      { id: "c", text: "Precision-recall curve" },
      { id: "d", text: "Confusion matrix" },
    ],
    correctOptionId: "a",
    explanation: "BLEU (Bilingual Evaluation Understudy) score is a metric commonly used to evaluate the quality of text that has been machine-generated. It is particularly useful for evaluating text generation tasks, such as those performed by foundation models, by comparing the generated text with reference texts. This makes BLEU score appropriate for assessing foundation model performance for text generation.",
    type: "single"
  },
  {
    id: "q5",
    text: "Which Amazon SageMaker feature should a data scientist use to understand model predictions?",
    options: [
      { id: "a", text: "Amazon SageMaker Ground Truth" },
      { id: "b", text: "Amazon SageMaker Clarify" },
      { id: "c", text: "Amazon SageMaker Model Monitor" },
      { id: "d", text: "Amazon SageMaker Feature Store" },
    ],
    correctOptionId: "b",
    explanation: "Amazon SageMaker Clarify helps improve model transparency by enabling developers to detect potential bias in machine learning models and explain how these models make predictions. It provides tools to generate model explainability reports that help data scientists understand feature importance and how individual features contribute to predictions.",
    type: "single",
    learnMoreLink: { text: "Amazon SageMaker Clarify", url: "https://aws.amazon.com/sagemaker/clarify/" }
  }
];

const EXAM_TIME = 20 * 60; // 20 minutes in seconds
const QUESTION_TIME = 3 * 60; // 3 minutes per question

const Exam = () => {
  const navigate = useNavigate();
  const { user } = useAuth();
  const [currentQuestionIndex, setCurrentQuestionIndex] = useState(0);
  const [timeRemaining, setTimeRemaining] = useState(QUESTION_TIME);
  const [totalTimeRemaining, setTotalTimeRemaining] = useState(EXAM_TIME);
  const [selectedAnswers, setSelectedAnswers] = useState<Record<string, string | string[]>>({});
  const [examStarted, setExamStarted] = useState(false);
  
  // Redirect if not logged in
  useEffect(() => {
    if (!user) {
      toast.error("Please login to access exams");
      navigate("/login");
    }
  }, [user, navigate]);

  // Timer countdown
  useEffect(() => {
    if (!examStarted || totalTimeRemaining <= 0) return;
    
    const timer = setInterval(() => {
      setTimeRemaining((prev) => Math.max(0, prev - 1));
      setTotalTimeRemaining((prev) => {
        if (prev <= 1) {
          clearInterval(timer);
          completeExam();
          return 0;
        }
        return prev - 1;
      });
    }, 1000);
    
    return () => clearInterval(timer);
  }, [examStarted, totalTimeRemaining]);

  const startExam = () => {
    setExamStarted(true);
  };

  const handleNextQuestion = () => {
    if (currentQuestionIndex < mockExamQuestions.length - 1) {
      setCurrentQuestionIndex((prev) => prev + 1);
      setTimeRemaining(QUESTION_TIME); // Reset question timer for new question
    }
  };

  const handleMultipleSelectSubmit = (selectedIds: string[]) => {
    const question = mockExamQuestions[currentQuestionIndex];
    setSelectedAnswers((prev) => ({
      ...prev,
      [question.id]: selectedIds
    }));
  };

  const pauseExam = () => {
    // Could implement pause functionality here
    toast.info("Exam paused");
  };

  const completeExam = () => {
    // Calculate results
    let correctAnswers = 0;
    
    mockExamQuestions.forEach((question) => {
      if (question.type === 'multiple') {
        // For multiple select questions
        const selectedIds = selectedAnswers[question.id] as string[] || [];
        const correctIds = question.correctOptionIds || [];
        if (arraysEqual(selectedIds.sort(), correctIds.sort())) {
          correctAnswers++;
        }
      } else {
        // For single select questions
        if (selectedAnswers[question.id] === question.correctOptionId) {
          correctAnswers++;
        }
      }
    });
    
    // Store results in local storage for the dashboard
    const results = {
      totalQuestions: mockExamQuestions.length,
      correctAnswers,
      timeSpent: EXAM_TIME - totalTimeRemaining,
      date: new Date().toISOString(),
      percentage: Math.round((correctAnswers / mockExamQuestions.length) * 100),
      questions: mockExamQuestions.map((q) => {
        if (q.type === 'multiple') {
          const selectedIds = selectedAnswers[q.id] as string[] || [];
          const correctIds = q.correctOptionIds || [];
          return {
            id: q.id,
            text: q.text,
            correctOption: correctIds,
            userAnswer: selectedIds,
            isCorrect: arraysEqual(selectedIds.sort(), correctIds.sort()),
          };
        } else {
          return {
            id: q.id,
            text: q.text,
            correctOption: q.correctOptionId,
            userAnswer: selectedAnswers[q.id] || null,
            isCorrect: selectedAnswers[q.id] === q.correctOptionId,
          };
        }
      }),
    };
    
    localStorage.setItem("examify-results", JSON.stringify(results));
    
    // Navigate to results dashboard
    navigate("/dashboard");
  };

  // Helper function to compare arrays
  const arraysEqual = (a: any[], b: any[]) => {
    if (a.length !== b.length) return false;
    for (let i = 0; i < a.length; i++) {
      if (a[i] !== b[i]) return false;
    }
    return true;
  };

  // If not yet started, show intro screen
  if (!examStarted) {
    return (
      <div className="min-h-screen bg-gray-50 py-8">
        <div className="container mx-auto px-4">
          <div className="max-w-4xl mx-auto bg-white p-8 rounded-lg shadow-sm border">
            <h1 className="text-2xl font-bold mb-2 text-center">AWS Certified AI Practitioner Official Practice Question Set (AIF-C01 - English)</h1>
            
            <div className="my-8">
              <h2 className="text-xl font-semibold mb-4">AWS Exam Preparation Official Question Sets Overview and Instructions</h2>
              <p className="mb-4">
                AWS Official Practice Question Sets feature 20 questions developed by AWS that demonstrate the style of AWS certification exams.
                These exam-style questions include detailed feedback and recommended resources to help you prepare for your exam.
              </p>
              <p className="mb-6">
                Download a copy of the Official Practice Question Sets Overview and Instructions as a PDF document to refer to while you complete the Practice Exam below:
              </p>
              
              <div className="bg-blue-50 border border-blue-100 rounded-md p-4 flex items-center gap-3 mb-6">
                <svg xmlns="http://www.w3.org/2000/svg" width="24" height="24" viewBox="0 0 24 24" fill="none" stroke="currentColor" strokeWidth="2" strokeLinecap="round" strokeLinejoin="round" className="text-blue-500">
                  <path d="M14.5 2H6a2 2 0 0 0-2 2v16a2 2 0 0 0 2 2h12a2 2 0 0 0 2-2V7.5L14.5 2z"/>
                  <polyline points="14 2 14 8 20 8"/>
                </svg>
                <a href="#" className="text-blue-600 hover:underline">AWS Exam Preparation Official Practice Question Sets Overview and Instructions.pdf</a>
              </div>
              
              <h2 className="text-xl font-semibold mb-4">Customer Support</h2>
              <p className="mb-4">
                If you need assistance, contact AWS Training and Certification Customer Service. Use the following information when you complete the form:
              </p>
              
              <ul className="list-disc pl-8 space-y-2 mb-6">
                <li><strong>Inquiry type dropdown menu:</strong> Choose Certification.</li>
                <li><strong>Additional details dropdown menu:</strong> Choose AWS Exam Preparation.</li>
                <li><strong>How can we help you? text box:</strong> Include the name of the Practice Exam and a detailed description of your issue.</li>
              </ul>
            </div>
            
            <div className="flex justify-between mt-8">
              <Button 
                variant="outline"
                className="border-gray-300"
              >
                Return To Product Dashboard
              </Button>
              
              <Button 
                onClick={startExam} 
                className="bg-green-600 hover:bg-green-700 text-white"
              >
                Start
              </Button>
            </div>
          </div>
        </div>
      </div>
    );
  }

  const currentQuestion = mockExamQuestions[currentQuestionIndex];

  return (
    <div className="min-h-screen bg-gray-50">
      <div className="container mx-auto px-4">
        <div className="max-w-6xl mx-auto">
          <ExamProgress
            currentQuestion={currentQuestionIndex + 1}
            totalQuestions={mockExamQuestions.length}
            timeRemaining={timeRemaining}
            totalTime={totalTimeRemaining}
            pauseExam={pauseExam}
          />
          
          <div className="bg-white p-6 rounded-lg shadow-sm border">
            {currentQuestion.type === 'multiple' ? (
              <MultipleSelectQuestion
                questionText={currentQuestion.text}
                options={currentQuestion.options}
                correctOptionIds={currentQuestion.correctOptionIds || []}
                onConfirm={handleMultipleSelectSubmit}
              />
            ) : (
              <QuestionCard
                question={currentQuestion}
                onNext={handleNextQuestion}
                isLastQuestion={currentQuestionIndex === mockExamQuestions.length - 1}
                onComplete={completeExam}
              />
            )}
          </div>
        </div>
      </div>
    </div>
  );
};

export default Exam;
